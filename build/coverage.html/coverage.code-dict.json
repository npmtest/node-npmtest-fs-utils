{"/home/travis/build/npmtest/node-npmtest-fs-utils/test.js":"/* istanbul instrument in package npmtest_fs_utils */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fs-utils/lib.npmtest_fs_utils.js":"/* istanbul instrument in package npmtest_fs_utils */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_fs_utils = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_fs_utils = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-fs-utils/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-fs-utils && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_fs_utils */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_fs_utils\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_fs_utils.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_fs_utils.rollup.js'] =\n            local.assetsDict['/assets.npmtest_fs_utils.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_fs_utils.__dirname +\n                    '/lib.npmtest_fs_utils.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fs-utils/node_modules/fs-utils/index.js":"/*!\n * fs-utils <https://github.com/assemble/fs-utils>\n *\n * Copyright (c) 2014-2015 Jon Schlinkert, Brian Woodward.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar fs = require('graceful-fs');\nvar path = require('path');\nvar EOL = require('os').EOL;\nvar EOLre = new RegExp(EOL, 'g');\nvar utils = require('./utils');\n\n/**\n * Strip carriage returns from a string.\n *\n * @param  {String} `str`\n * @return {String}\n * @api public\n */\n\nexports.stripCR = function(str) {\n  return str.replace(/\\r/g, '');\n};\n\n/**\n * Strip byte order marks from a string.\n *\n * See [BOM](http://en.wikipedia.org/wiki/Byte_order_mark)\n *\n * @param  {String} `str`\n * @return {String}\n * @api public\n */\n\nexports.stripBOM = function(str) {\n  return str.replace(/^\\uFEFF/, '');\n};\n\n/**\n * Normalize all slashes to forward slashes.\n *\n * @param  {String} `str`\n * @param  {Boolean} `stripTrailing` False by default.\n * @return {String}\n * @api public\n */\n\nexports.slashify = function(str, trailing) {\n  return utils.normalize(str, trailing || false);\n};\n\n/**\n * Normalize a string by stripping windows\n * carriage returns and byte order marks.\n *\n * @param  {String} `str`\n * @return {String}\n * @api private\n */\n\nexports.normalize = function(str){\n  if (EOL !== '\\n') {\n    str = str.replace(EOLre, '\\n');\n  }\n  return exports.stripBOM(str);\n};\n\n/**\n * True if the filepath actually exist.\n *\n * @param  {String} `filepath`\n * @return {Boolean}\n */\n\nvar exists = exports.exists = function(paths) {\n  var fp = path.join.apply(path, arguments);\n  try {\n    return fs.existsSync(fp);\n  } catch (err) {}\n  return false;\n};\n\n/**\n * Return `true` if the file exists and is empty.\n *\n * @param  {String} `filepath`\n * @return {Boolean}\n * @api public\n */\n\nexports.isEmptyFile = function(fp) {\n  if (exists(fp) === false) {\n    return false;\n  }\n  var str = exports.readFileSync(fp);\n  return str.length > 0;\n};\n\n/**\n * Return `true` if the file exists and is empty.\n *\n * @param  {String} `filepath`\n * @return {Boolean}\n * @api public\n */\n\nexports.isEmptyDir = function(fp) {\n  if (exists(fp) === false) {\n    return false;\n  }\n  var files = fs.readdirSync(fp);\n  return files.length > 0;\n};\n\n/**\n * Return `true` if the filepath is a directory.\n *\n * @param  {String} `filepath`\n * @return {Boolean}\n * @api public\n */\n\nexports.isDir = function(filepath) {\n  if (!exists(filepath)) {\n    return false;\n  }\n  return fs.statSync(filepath)\n    .isDirectory();\n};\n\n/**\n * True if the filepath is a file.\n *\n * @param  {String} `filepath`\n * @return {Boolean}\n */\n\nvar isFile = exports.isFile = function(filepath) {\n  if (!exists(filepath)) {\n    return false;\n  }\n  return fs.statSync(filepath)\n    .isFile();\n};\n\n/**\n * True if the filepath is a symbolic link.\n *\n * @param  {String} `filepath`\n * @return {Boolean}\n * @api public\n */\n\nexports.isLink = function(filepath) {\n  return exists(filepath) && fs.lstatSync(filepath)\n    .isSymbolicLink();\n};\n\n/**\n * Glob files using [matched]. Or glob files synchronously\n * with `glob.sync`.\n *\n * @param  {String|Array} `patterns`\n * @return {options}\n * @api public\n */\n\nexports.glob = utils.glob;\n\n/**\n * Read a file synchronously. Also strips any byte order\n * marks.\n *\n * @param  {String} `filepath`\n * @return {String}\n * @api public\n */\n\nexports.readFileSync = function(filepath, options) {\n  var opts = utils.extend({normalize: true, encoding: 'utf8'}, options);\n  var str = fs.readFileSync(filepath, opts.encoding);\n  if (opts.normalize && opts.encoding === 'utf8') {\n    str = exports.normalize(str);\n  }\n  return str;\n};\n\n/**\n * Read a file asynchronously.\n *\n * @param {String} `filepath`\n * @param {Object} `options`\n *   @param {Boolean} [options] `normalize` Strip carriage returns and BOM.\n *   @param {String} [options] `encoding` Default is `utf8`\n * @param {Function} `callback`\n * @api public\n */\n\nvar readFile = exports.readFile = function(filepath, options, cb) {\n  if (typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n\n  if (typeof cb !== 'function') {\n    throw new TypeError('readfile expects callback to be a function');\n  }\n\n  var opts = utils.extend({normalize: true, encoding: 'utf8'}, options);\n\n  fs.readFile(filepath, opts.encoding, function (err, content) {\n    if (err) return cb(err);\n\n    if (opts.normalize && opts.encoding === 'utf8') {\n      content = exports.normalize(content);\n    }\n    cb(null, content);\n  });\n};\n\n/**\n * Read a YAML file asynchronously and parse its contents as JSON.\n *\n * @param  {String} `filepath`\n * @return {Object} `options`\n * @return {Function} `cb` Callback function\n * @api public\n */\n\nexports.readYAML = function(filepath, options, cb) {\n  return utils.readYaml.apply(utils.readYaml, arguments);\n};\n\n/**\n * Read a YAML file synchronously and parse its contents as JSON\n *\n * @param  {String} `filepath`\n * @return {Object}\n * @api public\n */\n\nexports.readYAMLSync = function(filepath, options) {\n  return utils.readYaml.sync.apply(utils.readYaml, arguments);\n};\n\n/**\n * Read JSON file asynchronously and parse contents as JSON\n *\n * @param  {String} `filepath`\n * @param  {Function} `callback`\n * @return {Object}\n * @api public\n */\n\nexports.readJSON = function(filepath, cb) {\n  exports.readFile(filepath, function(err, contents) {\n    if (err) return cb(err);\n\n    cb(null, JSON.parse(contents.toString()));\n  });\n};\n\n/**\n * Read a file synchronously and parse contents as JSON.\n * marks.\n *\n * @param  {String} `filepath`\n * @return {Object}\n * @api public\n */\n\nexports.readJSONSync = function(filepath, options) {\n  return JSON.parse(exports.readFileSync(filepath, options));\n};\n\n/**\n * Read JSON or YAML utils.async. Determins the reader automatically\n * based on file extension.\n *\n * @param  {String} `filepath`\n * @param  {Object} `options`\n * @param  {Function} `callback`\n * @return {String}\n * @api public\n */\n\nexports.readData = function(filepath, options, cb) {\n  return utils.readData.data.apply(utils.readData, arguments);\n};\n\n/**\n * Read JSON or utils.YAML. Determins the reader automatically\n * based on file extension.\n *\n * @param  {String} `filepath`\n * @param  {Object} `options`\n * @return {String}\n * @api public\n */\n\nexports.readDataSync = function(filepath, options) {\n  return utils.readData.data.sync.apply(utils.readData, arguments);\n};\n\n/**\n * Asynchronously create dirs and any intermediate dirs\n * don't exist.\n *\n * @param  {String} `dirpath`\n */\n\nvar mkdir = exports.mkdir = function(dest, cb) {\n  var dir = path.dirname(dest);\n  fs.exists(dir, function (exist) {\n    if (exist) {\n      fs.mkdir(dest, cb);\n    } else {\n      mkdir(dir, function (err) {\n        if (err) return cb(err);\n        fs.mkdir(dest, cb);\n      });\n    }\n  });\n};\n\n/**\n * Synchronously create dirs and any intermediate dirs\n * don't exist.\n *\n * @param  {String} `dirpath`\n */\n\nvar mkdirSync = exports.mkdirSync = function(dirpath, mode) {\n  mode = mode || parseInt('0777', 8) & (~process.umask());\n  if (!exists(dirpath)) {\n    var parentDir = path.dirname(dirpath);\n    if (exists(parentDir)) {\n      fs.mkdirSync(dirpath, mode);\n    } else {\n      mkdirSync(parentDir);\n      fs.mkdirSync(dirpath, mode);\n    }\n  }\n};\n\n/**\n * Asynchronously write a file to disk.\n *\n * @param  {String} `dest`\n * @param  {String} `content`\n * @param  {Function} `callback`\n * @api public\n */\n\nexports.writeFile = function(dest, content, cb) {\n  utils.writeFile.apply(utils.writeFile, arguments);\n};\n\n/**\n * Synchronously write files to disk, creating any\n * intermediary directories if they don't exist.\n *\n * @param  {String} `dest`\n * @param  {String} `str`\n * @param  {Options} `options`\n * @api public\n */\n\nexports.writeFileSync = function(dest, str, options) {\n  utils.writeFile.sync.apply(utils.writeFile, arguments);\n};\n\n/**\n * Synchronously write JSON to disk, creating any\n * intermediary directories if they don't exist.\n *\n * @param  {String} `dest`\n * @param  {String} `str`\n * @param  {Options} `options`\n * @api public\n */\n\nexports.writeJSONSync = function(dest, str, options) {\n  utils.writeJson.sync.apply(utils.writeJson, arguments);\n};\n\n/**\n * Asynchronously write files to disk, creating any\n * intermediary directories if they don't exist.\n *\n * @param  {String} `dest`\n * @param  {String} `str`\n * @param  {Options} `options`\n * @api public\n */\n\nexports.writeJSON = function(dest, str, options, cb) {\n  utils.writeJson.apply(utils.writeJson, arguments);\n};\n\n/**\n * Synchronously write YAML to disk, creating any\n * intermediary directories if they don't exist.\n *\n * @param  {String} `dest`\n * @param  {String} `str`\n * @param  {Options} `options`\n * @api public\n */\n\nexports.writeYAMLSync = function(dest, str, options) {\n  utils.writeYaml.sync.apply(utils.writeYaml, arguments);\n};\n\n/**\n * Aynchronously write YAML to disk, creating any\n * intermediary directories if they don't exist.\n *\n * @param  {String} `dest`\n * @param  {String} `str`\n * @param  {Options} `options`\n * @api public\n */\n\nexports.writeYAML = function(dest, data, options, cb) {\n  utils.writeYaml.apply(utils.writeYaml, arguments);\n};\n\n/**\n * Synchronously write JSON or YAML to disk, creating any\n * intermediary directories if they don't exist. Data\n * type is determined by the `dest` file extension.\n *\n * ```js\n * writeDataSync('foo.yml', {foo: \"bar\"});\n * ```\n *\n * @param  {String} `dest`\n * @param  {String} `str`\n * @param  {Options} `options`\n * @api public\n */\n\nexports.writeDataSync = function(dest, data, options) {\n  utils.writeData.sync.apply(utils.writeData, arguments);\n};\n\n/**\n * Asynchronously write JSON or YAML to disk, creating any\n * intermediary directories if they don't exist. Data\n * type is determined by the `dest` file extension.\n *\n * ```js\n * writeData('foo.yml', {foo: \"bar\"});\n * ```\n *\n * @param  {String} `dest`\n * @param  {String} `data`\n * @param  {Options} `options`\n * @param  {Function} `cb` Callback function\n * @api public\n */\n\nexports.writeData = function(dest, data, options, cb) {\n  utils.writeData.apply(utils.writeData, arguments);\n};\n\n/**\n * Copy files synchronously;\n *\n * @param  {String} `src`\n * @param  {String} `dest`\n * @api public\n */\n\nexports.copyFileSync = function(src, dest) {\n  exports.writeFileSync(dest, exports.readFileSync(src));\n};\n\n/**\n * Asynchronously remove dirs and child dirs that exist.\n *\n * @param  {String} `dir`\n * @param  {Function} `cb\n * @return {Function}\n * @api public\n */\n\nexports.rmdir = function(dir, cb) {\n  if (typeof cb !== 'function') {\n    cb = function () {};\n  }\n\n  fs.readdir(dir, function (err, files) {\n    if (err) {\n      return cb(err);\n    }\n    utils.async.each(files, function (segment, next) {\n      var dir = path.join(dir, segment);\n      fs.stat(dir, function (err, stats) {\n        if (err) {\n          return cb(err);\n        }\n        if (stats.isDirectory()) {\n          utils.del(dir, next);\n        } else {\n          fs.unlink(dir, next);\n        }\n      });\n    }, function () {\n      fs.rmdir(dir, cb);\n    });\n  });\n};\n\n/**\n * Delete folders and files recursively. Pass a callback\n * as the last argument to use utils.async.\n *\n * @param  {String} `patterns` Glob patterns to use.\n * @param  {Object} `options` Options for matched.\n * @param  {Function} `cb`\n * @api public\n */\n\nexports.del = function(patterns, opts, cb) {\n  var args = [].slice.call(arguments);\n  var last = args[args.length - 1];\n\n  if (typeof last === 'function') {\n    exports.deleteAsync(patterns, opts);\n  } else {\n    exports.deleteSync(patterns, opts);\n  }\n};\n\n/**\n * Asynchronously delete folders and files.\n *\n * @param  {String} `patterns` Glob patterns to use.\n * @param  {String} `opts` Options for matched.\n * @param  {Function} `cb`\n * @api private\n */\n\nexports.deleteAsync = function(patterns, opts, cb) {\n  if (typeof opts !== 'object') {\n    cb = opts;\n    opts = {};\n  }\n\n  utils.glob(patterns, opts, function (err, files) {\n    if (err) {\n      cb(err);\n      return;\n    }\n    utils.async.each(files, function (filepath, next) {\n      if (opts.cwd && !exports.isAbsolute(filepath)) {\n        filepath = path.resolve(opts.cwd, filepath);\n      }\n\n      utils.del(filepath, next);\n    }, cb);\n  });\n};\n\n/**\n * Synchronously delete folders and files.\n *\n * @param  {String} `patterns` Glob patterns to use.\n * @param  {Object} `options` Options for matched.\n * @param  {Function} `cb`\n * @api private\n */\n\nexports.deleteSync = function(patterns, options) {\n  var opts = utils.extend({cwd: process.cwd()}, options);\n  utils.glob.sync(patterns, opts).forEach(function (filepath) {\n    if (opts.cwd) {\n      filepath = path.resolve(opts.cwd, filepath);\n    }\n    utils.del.sync(filepath);\n  });\n};\n\n/**\n * Return the file extension.\n *\n * @param  {String} `filepath`\n * @return {String}\n * @api public\n */\n\nexports.ext = function(filepath) {\n  return path.extname(filepath);\n};\n\n/**\n * Directory path excluding filename.\n *\n * @param  {String} `filepath`\n * @return {String}\n * @api public\n */\n\nexports.dirname = function(filepath) {\n  return isFile(filepath)\n    ? path.dirname(filepath)\n    : filepath;\n};\n\n/**\n * Return an array of path segments.\n *\n * @param  {String} `filepath`\n * @return {Array}\n */\n\nvar segments = exports.segments = function(filepath) {\n  return filepath.split(/[\\\\\\/]/g);\n};\n\n/**\n * The last `n` segments of a filepath. If a number\n * isn't passed for `n`, the last segment is returned.\n *\n * @param  {String} `filepath`\n * @return {String}\n * @api public\n */\n\nexports.last = function(filepath, num) {\n  var seg = segments(filepath);\n  return seg.slice(-(num || 1))\n    .join(path.sep);\n};\n\n/**\n * The first `n` segments of a filepath. If a number\n * isn't passed for `n`, the first segment is returned.\n *\n * @param  {String} `filepath`\n * @return {String}\n * @api public\n */\n\nexports.first = function(filepath, num) {\n  var seg = segments(filepath);\n  return seg.slice(num || 1)\n    .join(path.sep);\n};\n\n/**\n * Returns the last character in `filepath`\n *\n * ```\n * lastChar('foo/bar/baz/');\n * //=> '/'\n * ```\n *\n * @param  {String} `filepath`\n * @return {String}\n * @api public\n */\n\nexports.lastChar = function(filepath) {\n  var len = filepath.length;\n  return filepath[len - 1];\n};\n\n/**\n * Remove a trailing slash from a filepath\n *\n * @param  {String} `filepath`\n * @return {String}\n */\n\nvar removeSlash = exports.removeSlash = function(filepath) {\n  return filepath.replace(/[\\\\\\/]$/, '');\n};\n\n/**\n * Add a trailing slash to the filepath.\n *\n * Note, this does _not_ consult the file system\n * to check if the filepath is file or a directory.\n *\n * @param  {String} `filepath`\n * @return {String}\n * @api public\n */\n\nexports.addSlash = function(filepath) {\n  if (!/\\./.test(path.basename(filepath))) {\n    return removeSlash(filepath) + path.sep;\n  }\n  return filepath;\n};\n\n/**\n * Normalize a filepath and remove trailing slashes.\n *\n * @param  {String} `filepath`\n * @return {String}\n * @api public\n */\n\nexports.normalizePath = function(filepath) {\n  return removeSlash(path.normalize(filepath));\n};\n\n/**\n * Resolve a filepath, also normalizes and removes\n * trailing slashes.\n *\n * @param  {String} `filepath`\n * @return {String}\n */\n\nvar resolve = exports.resolve = function(filepath) {\n  var args = [].slice.call(arguments);\n  var paths = path.resolve.apply(path, args);\n  return exports.normalizePath(paths);\n};\n\n/**\n * Resolve the relative path from `a` to `b.\n *\n * @param  {String} `filepath`\n * @return {String}\n * @api public\n */\n\nexports.relative = function(a, b) {\n  return utils.relative.apply(utils.relative, arguments);\n};\n\n/**\n * Return `true` if the path is absolute.\n *\n * @param  {[type]}  filepath\n * @return {Boolean}\n * @api public\n */\n\nexports.isAbsolute = function(filepath) {\n  return utils.isAbs.apply(utils.isAbs, arguments);\n};\n\n/**\n * Return `true` if path `a` is the same as path `b.\n *\n * @param  {String} `filepath`\n * @param  {String} `a`\n * @param  {String} `b`\n * @return {Boolean}\n * @api public\n */\n\nexports.equivalent = function(a, b) {\n  return resolve(a) === resolve(b);\n};\n\n/**\n * True if descendant path(s) contained within ancestor path.\n * Note: does not test if paths actually exist.\n *\n * Sourced from [Grunt].\n *\n * @param  {String} `ancestor` The starting path.\n * @return {Boolean}\n * @api public\n */\n\nexports.doesPathContain = function(ancestor) {\n  ancestor = path.resolve(ancestor);\n\n  var args = [].slice.call(arguments, 1);\n  var len = arguments.length;\n  if (len === 0) {\n    return false;\n  }\n\n  var rel;\n  for (var i = 0; i < len; i++) {\n    rel = path.relative(resolve(args[i]), ancestor);\n    if (rel === '' || /\\w+/.test(rel)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * True if a filepath is the CWD.\n *\n * Sourced from [Grunt].\n *\n * @param  {String} `filepath`\n * @return {Boolean}\n * @api public\n */\n\nexports.isPathCwd = function(filepath) {\n  try {\n    var actual = fs.realpathSync(filepath);\n    return exports.equivalent(process.cwd(), actual);\n  } catch (err) {\n    return false;\n  }\n};\n\n/**\n * True if a filepath is contained within the CWD.\n *\n * @param  {String} `filepath`\n * @return {Boolean}\n * @api public\n */\n\nexports.isPathInCwd = function(filepath) {\n  try {\n    var actual = fs.realpathSync(path.resolve(filepath));\n    console.log(actual);\n    return exports.doesPathContain(process.cwd(), actual);\n  } catch (err) {\n    return false;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-fs-utils/node_modules/fs-utils/utils.js":"'use strict';\n\n/**\n * Module dependencies\n */\n\nvar utils = require('lazy-cache')(require);\n\n/**\n * Temporarily re-assign `require` to trick browserify and\n * webpack into reconizing lazy dependencies.\n *\n * This tiny bit of ugliness has the huge dual advantage of\n * only loading modules that are actually called at some\n * point in the lifecycle of the application, whilst also\n * allowing browserify and webpack to find modules that\n * are depended on but never actually called.\n */\n\nvar fn = require;\nrequire = utils;\n\n/**\n * Lazily required module dependencies\n */\n\nrequire('async');\nrequire('delete', 'del');\nrequire('js-yaml', 'YAML');\nrequire('extend-shallow', 'extend');\nrequire('is-absolute', 'isAbs');\nrequire('normalize-path', 'normalize');\nrequire('write', 'writeFile');\nrequire('kind-of', 'typeOf');\nrequire('matched', 'glob');\nrequire('read-data');\nrequire('read-yaml');\nrequire('write-json');\nrequire('write-yaml');\nrequire('write-data');\nrequire('relative');\n\n/**\n * Restore `require`\n */\n\nrequire = fn;\n\n/**\n * Utils\n */\n\nutils.tryStat = function(fp) {\n  try {\n    return fs.statSync(fp);\n  } catch (err) {}\n  return null;\n};\n\n/**\n * Expose `utils` modules\n */\n\nmodule.exports = utils;\n"}